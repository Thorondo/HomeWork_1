标定图片过大，通过FastStone Capture缩小，但放大算法糟糕，锯齿化严重，通过opencv缩小为宜
系统自带的图像编辑器的缩小算法更为优秀，这从缩小后的图像大小即可看出
1.第一次编译成功获得的相机内参
[450.1318059171271, 0, 298.4550116003795;
 0, 449.5416756280329, 206.3916940866376;
 0, 0, 1]
与matlab获得的相机内参相差很多
推测matlab使用的源图像是未经放大的其效果更好
当使用原始比例的图像时，程序运行时间随之增加
运行4:06得到第二次编译成功的相机内参
[3147.421150503582, 0, 2087.798776367803;
 0, 3145.010309362176, 1439.557696810517;
 0, 0, 1]
此次与matlab获得的相机内参相差不大
可以比较calibratecamera和solvepnp两个函数在计算旋转矩阵和平移矩阵上的精度，从算法两个函数应该是一样的，不过一个既要计算内参又要计算外参，从时间上自然calibratecamera函数不如solvepnp函数，毕竟内参可以提前标定，不需要临时计算
matlab得到的相机内参矩阵的对称矩阵
3141.84545738269	0	0
0	3137.62010047326	0
2015.05770206999	1514.83735165055	1
而且似乎（只是似乎）在同等精度下，matlab的标定速度更快